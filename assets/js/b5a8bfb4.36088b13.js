"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[744],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},29924:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],o={},s="TextFileView",c={unversionedId:"api/classes/TextFileView",id:"api/classes/TextFileView",isDocsHomePage:!1,title:"TextFileView",description:"This class implements a plaintext-based editable file view, which can be loaded and saved given an editor.",source:"@site/docs/api/classes/TextFileView.md",sourceDirName:"api/classes",slug:"/api/classes/TextFileView",permalink:"/obsidian-plugin-docs/api/classes/TextFileView",editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/api/classes/TextFileView.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"TextComponent",permalink:"/obsidian-plugin-docs/api/classes/TextComponent"},next:{title:"ToggleComponent",permalink:"/obsidian-plugin-docs/api/classes/ToggleComponent"}},d=[{value:"Properties",id:"properties",children:[{value:"data",id:"data",children:[]},{value:"requestSave",id:"requestsave",children:[]}]},{value:"Methods",id:"methods",children:[{value:"onUnloadFile",id:"onunloadfile",children:[]},{value:"onLoadFile",id:"onloadfile",children:[]},{value:"save",id:"save",children:[]},{value:"getViewData",id:"getviewdata",children:[]},{value:"setViewData",id:"setviewdata",children:[]},{value:"clear",id:"clear",children:[]}]}],u={toc:d};function p(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"textfileview"},"TextFileView"),(0,r.kt)("p",null,"This class implements a plaintext-based editable file view, which can be loaded and saved given an editor."),(0,r.kt)("p",null,"Note that by default, this view only saves when it's closing. To implement auto-save, your editor should\ncall ",(0,r.kt)("inlineCode",{parentName:"p"},"this.requestSave()")," when the content is changed."),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"data"},"data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"data: string\n")),(0,r.kt)("p",null,"In memory data"),(0,r.kt)("h3",{id:"requestsave"},"requestSave"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"requestSave: () => void\n")),(0,r.kt)("p",null,"Debounced save in 2 seconds from now"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"onunloadfile"},"onUnloadFile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onUnloadFile(file: TFile): Promise<void>;\n")),(0,r.kt)("h3",{id:"onloadfile"},"onLoadFile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onLoadFile(file: TFile): Promise<void>;\n")),(0,r.kt)("h3",{id:"save"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"save(clear?: boolean): Promise<void>;\n")),(0,r.kt)("h3",{id:"getviewdata"},"getViewData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"abstract getViewData(): string;\n")),(0,r.kt)("p",null,"Gets the data from the editor. This will be called to save the editor contents to the file."),(0,r.kt)("h3",{id:"setviewdata"},"setViewData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"abstract setViewData(data: string, clear: boolean): void;\n")),(0,r.kt)("p",null,"Set the data to the editor. This is used to load the file contents."),(0,r.kt)("p",null,"If clear is set, then it means we're opening a completely different file.\nIn that case, you should call clear(), or implement a slightly more efficient\nclearing mechanism given the new data to be set."),(0,r.kt)("h3",{id:"clear"},"clear"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"abstract clear(): void;\n")),(0,r.kt)("p",null,"Clear the editor. This is usually called when we're about to open a completely\ndifferent file, so it's best to clear any editor states like undo-redo history,\nand any caches/indexes associated with the previous file contents."))}p.isMDXComponent=!0}}]);