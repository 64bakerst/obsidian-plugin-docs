(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[4717],{57174:function(e,a,t){"use strict";t.r(a),t.d(a,{frontMatter:function(){return r},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var n=t(87462),i=t(63366),o=(t(67294),t(3905)),s=t(93456),l=["components"],r={},p="Workspace",c={unversionedId:"concepts/workspace",id:"concepts/workspace",isDocsHomePage:!1,title:"Workspace",description:"Obsidian lets you configure what content is visible to you at any given time. Hide the file explorer when you don't need it, display multiple documents side by side, or show an outline of your document while you're working on it. The configuration of visible content within your application window is known as the workspace.",source:"@site/docs/concepts/workspace.md",sourceDirName:"concepts",slug:"/concepts/workspace",permalink:"/obsidian-plugin-docs/concepts/workspace",editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/concepts/workspace.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Vault",permalink:"/obsidian-plugin-docs/concepts/vault"},next:{title:"Ribbon actions",permalink:"/obsidian-plugin-docs/guides/ribbon-actions"}},d=[{value:"Splits",id:"splits",children:[]},{value:"Inspect the workspace",id:"inspect-the-workspace",children:[]},{value:"Leaf lifecycle",id:"leaf-lifecycle",children:[]},{value:"Leaf groups",id:"leaf-groups",children:[]}],f={toc:d};function u(e){var a=e.components,t=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},f,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"workspace"},"Workspace"),(0,o.kt)("p",null,"Obsidian lets you configure what content is visible to you at any given time. Hide the file explorer when you don't need it, display multiple documents side by side, or show an outline of your document while you're working on it. The configuration of visible content within your application window is known as the ",(0,o.kt)("em",{parentName:"p"},"workspace"),"."),(0,o.kt)("p",null,"The workspace is implemented as a ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Tree_(data_structure)"},"tree data structure")," that consists of ",(0,o.kt)("em",{parentName:"p"},"group nodes")," and ",(0,o.kt)("em",{parentName:"p"},"leaf nodes"),". The main difference is that group nodes can contain any number of child nodes, including other group nodes, while leaf nodes can't contain any nodes at all."),(0,o.kt)("p",null,"There are two types of group nodes, ",(0,o.kt)("em",{parentName:"p"},"splits")," and ",(0,o.kt)("em",{parentName:"p"},"tabs"),", which determine how the children are presented to the user:"),(0,o.kt)(s.Mermaid,{chart:"flowchart TD\n    split{Split}\n    split --\x3e A((Leaf))\n    split --\x3e B((Leaf))\n    split --\x3e C((Leaf))\n\n    tabs{Tabs}\n    tabs --\x3e X((Leaf))\n    tabs --\x3e Y((Leaf))\n    tabs --\x3e Z((Leaf))",mdxType:"Mermaid"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A split node lays out its child nodes one after another along a vertical or horizontal direction."),(0,o.kt)("li",{parentName:"ul"},"A tabs node only displays one child node at a time and hides the others.")),(0,o.kt)("p",null,"The workspace has three special split nodes under it: ",(0,o.kt)("em",{parentName:"p"},"left"),", ",(0,o.kt)("em",{parentName:"p"},"right"),", and ",(0,o.kt)("em",{parentName:"p"},"root"),". The following diagram shows a example of what a typical workspace could look like:"),(0,o.kt)(s.Mermaid,{chart:"flowchart TD\n    Workspace --\x3e Left{Left split}\n    Workspace --\x3e Root{Root split}\n    Workspace --\x3e Right{Right split}\n\n    Left --\x3e leftTabs{Tabs}\n    leftTabs --\x3e A((Leaf))\n    leftTabs --\x3e B((Leaf))\n\n    Root --\x3e C{Split}\n    Root --\x3e D((Leaf))\n\n    C --\x3e E((Leaf))\n    C --\x3e F((Leaf))\n\n    Right --\x3e rightTabs{Tabs}\n\n    rightTabs --\x3e I((Leaf))\n    rightTabs --\x3e J((Leaf))\n    rightTabs --\x3e K((Leaf))",mdxType:"Mermaid"}),(0,o.kt)("p",null,"A leaf is a window that can display content in different ways. The type of leaf determines how content is displayed, and correspond to a specific ",(0,o.kt)("em",{parentName:"p"},"view"),". For example, a leaf of type ",(0,o.kt)("inlineCode",{parentName:"p"},"graph")," displays the ",(0,o.kt)("a",{parentName:"p",href:"https://help.obsidian.md/Plugins/Graph+view"},"graph view"),"."),(0,o.kt)("h2",{id:"splits"},"Splits"),(0,o.kt)("p",null,"By default, the direction of the root split is set to vertical. When you create a new leaf to it, Obsidian creates a new column in the user interface. When you split a leaf, the resulting leaves are added to a new split node. While there's no defined limit to the number of levels you can create under the root split, in practice their usefulness diminish for each level."),(0,o.kt)(s.Mermaid,{chart:'flowchart TD\n    rootBefore{"Root split\n(before)"}\n\n    rootBefore --\x3e leaf1((Leaf))\n    rootBefore --\x3e leaf2((Leaf))\n\n    rootAfter{"Root split\n(after)"}\n\n    rootAfter --\x3e split{Split}\n    rootAfter --\x3e leaf3((Leaf))\n    split --\x3e leaf4((Leaf))\n    split --\x3e leaf5((Leaf))',mdxType:"Mermaid"}),(0,o.kt)("p",null,"The left and right splits work a little differently. When you split a leaf in the side docks, Obsidian generates a new tabs node and adds the new leaf under it. Effectively, this means they can only have three levels of nodes at any time, and any direct children must be tabs nodes."),(0,o.kt)(s.Mermaid,{chart:'flowchart TD\n    split1{"Right split\n(before)"}\n    tabs1{Tabs}\n    leaf1((Leaf))\n    leaf2((Leaf))\n\n    split1 --\x3e tabs1\n    tabs1 --\x3e leaf1\n    tabs1 --\x3e leaf2\n\n    split2{"Right split\n(after)"}\n    tabs2{Tabs}\n    tabs3{Tabs}\n    leaf3((Leaf))\n    leaf4((Leaf))\n    leaf5((Leaf))\n\n    split2 --\x3e tabs2\n    tabs2 --\x3e leaf3\n    tabs2 --\x3e leaf4\n\n    split2 --\x3e tabs3\n    tabs3 --\x3e leaf5',mdxType:"Mermaid"}),(0,o.kt)("h2",{id:"inspect-the-workspace"},"Inspect the workspace"),(0,o.kt)("p",null,"You can access the workspace through the ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/App"},"App")," object. The following example prints the type of every leaf in the workspace:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts" {6-8}',title:'"main.ts"',"{6-8}":!0},'import { Plugin } from "obsidian";\n\nexport default class ExamplePlugin extends Plugin {\n  async onload() {\n    this.addRibbonIcon("dice", "Print leaf types", () => {\n      this.app.workspace.iterateAllLeaves((leaf) => {\n        console.log(leaf.getViewState().type);\n      });\n    });\n  }\n}\n')),(0,o.kt)("h2",{id:"leaf-lifecycle"},"Leaf lifecycle"),(0,o.kt)("p",null,"Plugins can add leaves of any type to the workspace, as well as define new leaf types through ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/guides/custom-views"},"custom views"),". Here are a few ways to add a leaf to the workspace. For more ways, refer to ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Workspace"},(0,o.kt)("inlineCode",{parentName:"a"},"Workspace")),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you want to add a new leaf in the root split, use ",(0,o.kt)("a",{parentName:"li",href:"/obsidian-plugin-docs/api/classes/Workspace#getleaf"},(0,o.kt)("inlineCode",{parentName:"a"},"workspace.getLeaf(true)")),"."),(0,o.kt)("li",{parentName:"ul"},"If you want to add a new leaf in any of the side bars, use ",(0,o.kt)("a",{parentName:"li",href:"/obsidian-plugin-docs/api/classes/Workspace#getleftleaf"},(0,o.kt)("inlineCode",{parentName:"a"},"workspace.getLeftLeaf()"))," and ",(0,o.kt)("a",{parentName:"li",href:"/obsidian-plugin-docs/api/classes/Workspace#getrightleaf"},(0,o.kt)("inlineCode",{parentName:"a"},"workspace.getRightLeaf()")),". Both let you decide whether to add the leaf to a new split.")),(0,o.kt)("p",null,"You can also explicitly add the leaf in the split of your choice, using ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Workspace#createleafinparent"},(0,o.kt)("inlineCode",{parentName:"a"},"createLeafInParent()")),"."),(0,o.kt)("p",null,"Unless explicitly removed, any leaves that a plugin add to the workspace remain even after the plugin is disabled. Plugins are responsible for removing any leaves they add to the workspace."),(0,o.kt)("p",null,"To remove a leaf from the workspace, call ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/WorkspaceLeaf#detach"},(0,o.kt)("inlineCode",{parentName:"a"},"detach()"))," on the leaf you want to remove. You can also remove all leaves of a certain type, by using ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Workspace#detachleavesoftype"},(0,o.kt)("inlineCode",{parentName:"a"},"detachLeavesOfType()")),"."),(0,o.kt)("h2",{id:"leaf-groups"},"Leaf groups"),(0,o.kt)("p",null,"You can create ",(0,o.kt)("a",{parentName:"p",href:"https://help.obsidian.md/User+interface/Workspace/Panes/Linked+pane"},"linked panes")," by assigning multiple leaves to the same group, using ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/WorkspaceLeaf#setgroup"},(0,o.kt)("inlineCode",{parentName:"a"},"setGroup()")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'leaves.forEach((leaf) => leaf.setGroup("group1");\n')))}u.isMDXComponent=!0},11748:function(e,a,t){var n={"./locale":89234,"./locale.js":89234};function i(e){var a=o(e);return t(a)}function o(e){if(!t.o(n,e)){var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=o,e.exports=i,i.id=11748}}]);