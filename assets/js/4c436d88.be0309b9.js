"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[3713],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),d=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(r),m=n,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return r?a.createElement(g,o(o({ref:t},c),{},{components:r})):a.createElement(g,o({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},21821:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var a=r(87462),n=r(63366),i=(r(67294),r(3905)),o=["components"],s={},l="DataAdapter",d={unversionedId:"api/interfaces/DataAdapter",id:"api/interfaces/DataAdapter",isDocsHomePage:!1,title:"DataAdapter",description:"Methods",source:"@site/docs/api/interfaces/DataAdapter.md",sourceDirName:"api/interfaces",slug:"/api/interfaces/DataAdapter",permalink:"/obsidian-plugin-docs/api/interfaces/DataAdapter",editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/api/interfaces/DataAdapter.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Constructor",permalink:"/obsidian-plugin-docs/api/interfaces/Constructor"},next:{title:"DataWriteOptions",permalink:"/obsidian-plugin-docs/api/interfaces/DataWriteOptions"}},c=[{value:"Methods",id:"methods",children:[{value:"getName",id:"getname",children:[]},{value:"exists",id:"exists",children:[]},{value:"stat",id:"stat",children:[]},{value:"list",id:"list",children:[]},{value:"read",id:"read",children:[]},{value:"readBinary",id:"readbinary",children:[]},{value:"write",id:"write",children:[]},{value:"writeBinary",id:"writebinary",children:[]},{value:"getResourcePath",id:"getresourcepath",children:[]},{value:"mkdir",id:"mkdir",children:[]},{value:"trashSystem",id:"trashsystem",children:[]},{value:"trashLocal",id:"trashlocal",children:[]},{value:"rmdir",id:"rmdir",children:[]},{value:"remove",id:"remove",children:[]},{value:"rename",id:"rename",children:[]},{value:"copy",id:"copy",children:[]}]}],p={toc:c};function u(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dataadapter"},"DataAdapter"),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"getname"},"getName"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getName: () => string\n")),(0,i.kt)("h3",{id:"exists"},"exists"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"exists: (normalizedPath: string, sensitive?: boolean) => Promise<boolean>\n")),(0,i.kt)("h3",{id:"stat"},"stat"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"stat: (normalizedPath: string) => Promise<Stat>\n")),(0,i.kt)("h3",{id:"list"},"list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"list: (normalizedPath: string) => Promise<ListedFiles>\n")),(0,i.kt)("h3",{id:"read"},"read"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"read: (normalizedPath: string) => Promise<string>\n")),(0,i.kt)("h3",{id:"readbinary"},"readBinary"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"readBinary: (normalizedPath: string) => Promise<ArrayBuffer>\n")),(0,i.kt)("h3",{id:"write"},"write"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"write: (normalizedPath: string, data: string, options?: DataWriteOptions) => Promise<void>\n")),(0,i.kt)("h3",{id:"writebinary"},"writeBinary"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"writeBinary: (normalizedPath: string, data: ArrayBuffer, options?: DataWriteOptions) => Promise<void>\n")),(0,i.kt)("h3",{id:"getresourcepath"},"getResourcePath"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getResourcePath: (normalizedPath: string) => string\n")),(0,i.kt)("h3",{id:"mkdir"},"mkdir"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"mkdir: (normalizedPath: string) => Promise<void>\n")),(0,i.kt)("h3",{id:"trashsystem"},"trashSystem"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"trashSystem: (normalizedPath: string) => Promise<boolean>\n")),(0,i.kt)("h3",{id:"trashlocal"},"trashLocal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"trashLocal: (normalizedPath: string) => Promise<void>\n")),(0,i.kt)("h3",{id:"rmdir"},"rmdir"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"rmdir: (normalizedPath: string, recursive: boolean) => Promise<void>\n")),(0,i.kt)("h3",{id:"remove"},"remove"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"remove: (normalizedPath: string) => Promise<void>\n")),(0,i.kt)("h3",{id:"rename"},"rename"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"rename: (normalizedPath: string, normalizedNewPath: string) => Promise<void>\n")),(0,i.kt)("h3",{id:"copy"},"copy"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"copy: (normalizedPath: string, normalizedNewPath: string) => Promise<void>\n")))}u.isMDXComponent=!0}}]);