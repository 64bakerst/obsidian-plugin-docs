"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[7041],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),f=i,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84463:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),l=["components"],r={},s="Vault",c={unversionedId:"concepts/vault",id:"concepts/vault",isDocsHomePage:!1,title:"Vault",description:"From the official documentation on Working with multiple Vaults:",source:"@site/docs/concepts/vault.md",sourceDirName:"concepts",slug:"/concepts/vault",permalink:"/obsidian-plugin-docs/concepts/vault",editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/concepts/vault.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Anatomy of a plugin",permalink:"/obsidian-plugin-docs/getting-started/plugin-anatomy"},next:{title:"Workspace",permalink:"/obsidian-plugin-docs/concepts/workspace"}},p=[{value:"Read files",id:"read-files",children:[]},{value:"Delete files",id:"delete-files",children:[]},{value:"Is it a file or folder?",id:"is-it-a-file-or-folder",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vault"},"Vault"),(0,o.kt)("p",null,"From the official documentation on ",(0,o.kt)("a",{parentName:"p",href:"https://help.obsidian.md/How+to/Working+with+multiple+vaults"},"Working with multiple Vaults"),":"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Each collection of notes in Obsidian is known as a Vault. A Vault consists of a folder, and any sub-folders within it.")),(0,o.kt)("p",null,"While your plugin can access the file system like any other NodeJS application, the ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Vault"},(0,o.kt)("inlineCode",{parentName:"a"},"Vault"))," module aims to make it easier to work with files and folders within a Vault."),(0,o.kt)("p",null,"The following example recursively prints the paths of all Markdown files in a Vault:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const files = this.app.vault.getMarkdownFiles()\n\nfor (let = i; i < files.length; i++) {\n  console.log(files[i].path);\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you want to list ",(0,o.kt)("em",{parentName:"p"},"all")," files, and not just Markdown documents, use ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Vault#getfiles"},(0,o.kt)("inlineCode",{parentName:"a"},"getFiles()"))," instead."))),(0,o.kt)("h2",{id:"read-files"},"Read files"),(0,o.kt)("p",null,"There are two methods for reading the content of a file: ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Vault#read"},(0,o.kt)("inlineCode",{parentName:"a"},"read()"))," and ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Vault#cachedread"},(0,o.kt)("inlineCode",{parentName:"a"},"cachedRead()")),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you only want to display the content to the user, then use ",(0,o.kt)("inlineCode",{parentName:"li"},"cachedRead()")," to avoid reading the file from disk multiple times."),(0,o.kt)("li",{parentName:"ul"},"If you want to read the content, change it, and then write it back to disk, then use ",(0,o.kt)("inlineCode",{parentName:"li"},"read()")," to avoid potentially overwriting the file with a stale copy.")),(0,o.kt)("p",null,"The following example reads the content of all Markdown files in the Vault and returns the average document size:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'},'import { Notice, Plugin } from "obsidian";\n\nexport default class ExamplePlugin extends Plugin {\n  async onload() {\n    this.addRibbonIcon("info", "Calculate average file length", async () => {\n      const fileLength = await this.averageFileLength();\n      new Notice(`The average file length is ${fileLength} characters.`);\n    });\n  }\n\n  async averageFileLength(): Promise<number> {\n    const { vault } = this.app;\n\n    const fileContents: string[] = await Promise.all(\n      vault.getMarkdownFiles().map((file) => vault.cachedRead(file))\n    );\n\n    let totalLength = 0;\n    fileContents.forEach((content) => {\n      totalLength += content.length;\n    });\n\n    return totalLength / fileContents.length;\n  }\n}\n')),(0,o.kt)("h2",{id:"delete-files"},"Delete files"),(0,o.kt)("p",null,"There are two methods to delete a file, ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Vault#delete"},(0,o.kt)("inlineCode",{parentName:"a"},"delete()")),", and ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Vault#trash"},(0,o.kt)("inlineCode",{parentName:"a"},"trash()")),". Which one you should use depends on if you want to allow the user to change their mind."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"delete()")," removes the file without a trace."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"trash()")," moves the file to the trash bin.")),(0,o.kt)("p",null,"When you use ",(0,o.kt)("inlineCode",{parentName:"p"},"trash()"),", you have the option to move the file to the system's trash bin, or to a local  ",(0,o.kt)("inlineCode",{parentName:"p"},".trash")," folder at the root of the user's Vault."),(0,o.kt)("h2",{id:"is-it-a-file-or-folder"},"Is it a file or folder?"),(0,o.kt)("p",null,"Some operations return or accept a ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/TAbstractFile"},(0,o.kt)("inlineCode",{parentName:"a"},"TAbstractFile"))," object, which can be either a file or a folder. Always check the concrete type of a ",(0,o.kt)("inlineCode",{parentName:"p"},"TAbstractFile")," before you use it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const folderOrFile = this.app.vault.getAbstractFileByPath("folderOrFile");\n\nif (folderOrFile instanceof TFile) {\n  console.log("It\'s a file!");\n} else if (folderOrFile instanceof TFolder) {\n  console.log("It\'s a folder!");\n}\n')))}d.isMDXComponent=!0}}]);